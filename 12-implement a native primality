// 12.	Write a program to implement a naive primality test for a given number. Analyze and comment on its time complexity.
#include <stdio.h>

// Function to check primality
int isPrime(int n) {
    if (n <= 1)
        return 0;  // 0 and 1 are not prime numbers

    // Check for factors from 2 to n-1
    for (int i = 2; i < n; i++) {
        if (n % i == 0)
            return 0;  // Not prime
    }

    return 1;  // Prime
}

int main() {
    int num;
    printf("Enter a number: ");
    scanf("%d", &num);

    if (isPrime(num))
        printf("%d is a Prime Number.\n", num);
    else
        printf("%d is Not a Prime Number.\n", num);

    return 0;
}

// Time Complexity: O(n)
// Explanation:
// In the worst case (when the number is prime),
// the loop runs from 2 to n-1, making (n - 2) iterations.
// Hence, the time complexity is linear: O(n).
//
// This method is simple but inefficient for large numbers.
// Optimization: Loop till sqrt(n) to reduce complexity to O(âˆšn)

