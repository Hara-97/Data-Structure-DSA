// 36.	Implement a Stack data structure using an array. Include push, pop, peek, and isEmpty operations. Handle stack overflow/underflow
#include <stdio.h>
#define SIZE 5  // Stack size

int stack[SIZE];
int top = -1;

// Function to check if stack is empty
int isEmpty() {
    return top == -1;
}

// Function to check if stack is full
int isFull() {
    return top == SIZE - 1;
}

// Push operation
void push(int value) {
    if (isFull()) {
        printf("Stack Overflow! Cannot push %d\n", value);
    } else {
        top++;
        stack[top] = value;
        printf("%d pushed to stack\n", value);
    }
}

// Pop operation
void pop() {
    if (isEmpty()) {
        printf("Stack Underflow! Cannot pop\n");
    } else {
        printf("%d popped from stack\n", stack[top]);
        top--;
    }
}

// Peek operation
void peek() {
    if (isEmpty()) {
        printf("Stack is empty! Nothing to peek\n");
    } else {
        printf("Top element is %d\n", stack[top]);
    }
}

// Main function
int main() {
    push(10);
    push(20);
    push(30);
    peek();      // Should print 30
    pop();       // Should remove 30
    peek();      // Should print 20
    pop();
    pop();
    pop();       // Should show underflow
    return 0;
}

