// 40.	Implement a program to convert an infix expression to a postfix expression using a Stack.
#include <stdio.h>

char stack[100];
int top = -1;

void push(char ch) {
    top++;
    stack[top] = ch;
}

char pop() {
    char ch = stack[top];
    top--;
    return ch;
}

int priority(char ch) {
    if (ch == '*' || ch == '/') return 2;
    if (ch == '+' || ch == '-') return 1;
    return 0;
}

int main() {
    char infix[100], postfix[100];
    int i = 0, j = 0;
    char ch;

    printf("Enter infix: ");
    scanf("%s", infix);

    while (infix[i] != '\0') {
        ch = infix[i];

        if (ch >= 'A' && ch <= 'Z') {
            postfix[j] = ch;
            j++;
        } else {
            while (top != -1 && priority(stack[top]) >= priority(ch)) {
                postfix[j] = pop();
                j++;
            }
            push(ch);
        }

        i++;
    }

    while (top != -1) {
        postfix[j] = pop();
        j++;
    }

    postfix[j] = '\0';

    printf("Postfix: %s\n", postfix);

    return 0;
}
