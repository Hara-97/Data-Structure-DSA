// 40.	Implement a program to convert an infix expression to a postfix expression using a Stack.
#include <stdio.h>
#include <ctype.h>

char stack[100];
int top = -1;

// Push function
void push(char c) {
    stack[++top] = c;
}

// Pop function
char pop() {
    return stack[top--];
}

// Get precedence
int prec(char c) {
    if (c == '*' || c == '/')
        return 2;
    if (c == '+' || c == '-')
        return 1;
    return 0;
}

// Infix to Postfix
void convert(char infix[]) {
    char postfix[100];
    int i = 0, j = 0;
    char c;

    while (infix[i] != '\0') {
        c = infix[i];

        if (isalnum(c)) {
            postfix[j++] = c;  // Add operand
        } else if (c == '(') {
            push(c);
        } else if (c == ')') {
            while (stack[top] != '(') {
                postfix[j++] = pop();
            }
            pop();  // remove '('
        } else {  // operator
            while (top != -1 && prec(stack[top]) >= prec(c)) {
                postfix[j++] = pop();
            }
            push(c);
        }
        i++;
    }

    // Pop remaining operators
    while (top != -1) {
        postfix[j++] = pop();
    }

    postfix[j] = '\0';
    printf("Postfix: %s\n", postfix);
}

// Main
int main() {
    char infix[100];
    printf("Enter infix: ");
    scanf("%s", infix);
    convert(infix);
    return 0;
}
